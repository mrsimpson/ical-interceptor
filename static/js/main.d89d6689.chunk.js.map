{"version":3,"sources":["readJcalFromUrl.js","retrieveEvents.js","mapJcalToFullCalendarEvents.js","CalendarPreview.jsx","IcalSource.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fetch","require","ical","BACKEND","readJcalFromUrl","url","a","Error","proxyUrl","match","RegExp","resource","text","jCal","parse","console","warn","Object","keys","length","mapJcalToFullCalendarEvents","jCalEvents","map","item","getFirstPropertyValue","toreturn","rrule","freq","parts","BYDAY","byweekday","until","toString","interval","dtstart","dtend","startdate","Date","enddate","duration","start","end","CalendarPreview","props","state","calendarEvents","prevProps","this","jcal","events","Component","getAllSubcomponents","setState","log","className","defaultView","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","ref","calendarComponentRef","weekends","calendarWeekends","dateClick","handleDateClick","React","ICalSource","onSubmit","handleChange","bind","handleSubmit","event","target","value","preventDefault","type","placeholder","onChange","App","setUrl","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WAAMA,EAAQC,EAAQ,IAChBC,EAAOD,EAAQ,IAEfE,EAAU,4CAED,SAAeC,EAA9B,kC,4CAAe,WAA+BC,GAA/B,mBAAAC,EAAA,yDACND,EADM,sBAED,IAAIE,MAAM,mDAFT,cAKLC,EAAWH,EAAII,MAAM,IAAIC,OAAOP,IAChCE,EACAF,EAAU,SAAWE,EAPhB,kBASgBL,EAAMQ,GATtB,cASDG,EATC,YAUAT,EAVA,UAUiBS,EAASC,OAV1B,oBAUPC,EAVO,KAUKC,MAVL,kEAaPC,QAAQC,KAAKX,EAAb,MAbO,WAeNQ,GAAqC,IAA7BI,OAAOC,KAAKL,GAAMM,OAfpB,uBAgBD,IAAIZ,MAAM,qDAhBT,iCAmBJM,GAnBI,2D,sBCLf,IAAMX,EAAOD,EAAQ,ICArB,IAmCemB,EAnCqB,SAAUC,GAC1C,OAAOA,EAAWC,KAAI,SAACC,GAEnB,GAA4C,YAAxCA,EAAKC,sBAAsB,SAC3B,OAAO,KAGP,IAAIC,EAAW,CACX,MAASF,EAAKC,sBAAsB,WACpC,SAAYD,EAAKC,sBAAsB,aAEvCE,EAAQH,EAAKC,sBAAsB,SACvC,GAAa,MAATE,EAAe,CACfD,EAASC,MAAQ,GACbA,EAAMC,OAAMF,EAASC,MAAMC,KAAOD,EAAMC,MACxCD,EAAME,MAAMC,QAAOJ,EAASC,MAAMI,UAAYJ,EAAME,MAAMC,OAC1DH,EAAMK,QAAON,EAASC,MAAMK,MAAQL,EAAMK,MAAMC,YAChDN,EAAMK,QAAON,EAASC,MAAMK,MAAQL,EAAMK,MAAMC,YAChDN,EAAMO,WAAUR,EAASC,MAAMO,SAAWP,EAAMO,UACpD,IAAIC,EAAUX,EAAKC,sBAAsB,WAAWQ,WAChDG,EAAQZ,EAAKC,sBAAsB,SAASQ,WAChDP,EAASC,MAAMQ,QAAUA,EAEzB,IAAIE,EAAY,IAAIC,KAAKH,GACrBI,EAAU,IAAID,KAAKF,GACvBV,EAASc,SAAWD,EAAUF,OAE9BX,EAASe,MAAQjB,EAAKC,sBAAsB,WAAWQ,WACvDP,EAASgB,IAAMlB,EAAKC,sBAAsB,SAASQ,WAEvD,OAAOP,MCjBEiB,G,kBAEnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,eAAgB,IAHD,E,yHAOMC,G,6EACnBC,KAAKJ,MAAMtC,KAAQ0C,KAAKJ,MAAMtC,MAAQyC,EAAUzC,I,0CAE7BD,EAAgB2C,KAAKJ,MAAMtC,K,OAAxCQ,E,OFvByBmC,EEwBDnC,EAAxBoC,EFvBQ,IAAI/C,EAAKgD,UAAUF,GACZG,oBAAoB,UEuBzCJ,KAAKK,SAAS,CAAEP,eAAgBzB,EAA4B6B,K,gDAE5DlC,QAAQsC,IAAR,M,kCF3BO,IAAwBL,I,0GEiCnC,OACE,yBAAKM,UAAU,WACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CACEC,YAAY,eACZC,OAAQ,CACNC,KAAM,kBACNC,OAAQ,QACRC,MAAO,kDAETC,QAAS,CAACC,IAAeC,IAAgBC,KACzCC,IAAKjB,KAAKkB,qBACVC,SAAUnB,KAAKH,MAAMuB,iBACrBlB,OAAQF,KAAKH,MAAMC,eACnBuB,UAAWrB,KAAKsB,mBAGpB,uBAAGf,UAAU,cAAb,WAAmCP,KAAKJ,MAAMtC,U,GAvCTiE,IAAMpB,Y,OCR9BqB,G,kBACnB,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEvC,IAAK,IACpB,EAAKmE,SAAW7B,EAAM6B,SAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANH,E,0EASNE,GACX7B,KAAKK,SAAS,CAAE/C,IAAKuE,EAAMC,OAAOC,U,mCAGvBF,GACX7B,KAAKyB,UAAYzB,KAAKyB,SAASzB,KAAKH,MAAMvC,KAC1CuE,EAAMG,mB,+BAIN,OACE,0BAAMzB,UAAU,cAAckB,SAAUzB,KAAK4B,cAE3C,yBAAKrB,UAAU,cACb,0CACA,2BAAQA,UAAU,aACV0B,KAAK,OACLC,YAAY,iFACZ5E,IAAK0C,KAAKH,MAAMvC,IAChB6E,SAAUnC,KAAK0B,qB,GA7BOH,IAAMpB,YC6B/BiC,G,kBA3Bb,WAAYxC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRyC,OAAS,SAAC/E,GACR,EAAK+C,SAAS,CAAE/C,QAChBU,QAAQsC,IAAI,SAAU,EAAKT,MAAMvC,MAPjC,EAAKuC,MAAQ,CACXvC,IAAK,IAHU,E,kFAajBU,QAAQsC,IAAI,UAAWN,KAAKH,MAAMvC,O,+BAG1B,IACAA,EAAQ0C,KAAKH,MAAbvC,IACR,OACE,yBAAKiD,UAAU,OACb,kBAAC,EAAD,CAAYkB,SAAUzB,KAAKqC,SAC3B,kBAAC,EAAD,CAAiB/E,IAAKA,S,GAtBZiE,IAAMpB,YCMJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/E,MACvB,2D,MCXNgF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d89d6689.chunk.js","sourcesContent":["const fetch = require('node-fetch')\nconst ical = require('ical.js')\n\nconst BACKEND = \"https://mrsimpson.o6s.io/ical-interceptor\" // TODO: Configuration\n\nexport default async function readJcalFromUrl(url) {\n    if (!url) {\n        throw new Error('Supply a URL at which the ical can be retrieved')\n    }\n    let jCal\n    const proxyUrl = url.match(new RegExp(BACKEND))\n        ? url\n        : BACKEND + '/?url=' + url\n    try {\n        const resource = await fetch(proxyUrl)\n        jCal = ical.parse(await resource.text())\n        // jCal = await ical.fromURL(url)\n    } catch (err) {\n        console.warn(url, err)\n    }\n    if (!jCal || Object.keys(jCal).length === 0) {\n        throw new Error('URL supplied does not yield a valid iCal calendar')\n    }\n\n    return jCal\n}\n","const ical = require('ical.js')\n\nexport default function retrieveEvents(jcal) {\n    const component = new ical.Component(jcal)\n    const events = component.getAllSubcomponents('vevent')\n    return events\n}","const mapJcalToFullCalendarEvents = function (jCalEvents) {\n    return jCalEvents.map((item) => {\n\n        if (item.getFirstPropertyValue(\"class\") === \"PRIVATE\") {\n            return null;\n        }\n        else {\n            var toreturn = {\n                \"title\": item.getFirstPropertyValue(\"summary\"),\n                \"location\": item.getFirstPropertyValue(\"location\"),\n            };\n            var rrule = item.getFirstPropertyValue(\"rrule\");\n            if (rrule != null) { //event recurs\n                toreturn.rrule = {};\n                if (rrule.freq) toreturn.rrule.freq = rrule.freq;\n                if (rrule.parts.BYDAY) toreturn.rrule.byweekday = rrule.parts.BYDAY;\n                if (rrule.until) toreturn.rrule.until = rrule.until.toString();\n                if (rrule.until) toreturn.rrule.until = rrule.until.toString();\n                if (rrule.interval) toreturn.rrule.interval = rrule.interval;\n                var dtstart = item.getFirstPropertyValue(\"dtstart\").toString();\n                var dtend = item.getFirstPropertyValue(\"dtend\").toString();\n                toreturn.rrule.dtstart = dtstart;\n                //count duration ms\n                var startdate = new Date(dtstart);\n                var enddate = new Date(dtend);\n                toreturn.duration = enddate - startdate;\n            } else {\n                toreturn.start = item.getFirstPropertyValue(\"dtstart\").toString();\n                toreturn.end = item.getFirstPropertyValue(\"dtend\").toString();\n            }\n            return toreturn;\n        }\n    })\n}\n\nexport default mapJcalToFullCalendarEvents","import React from 'react'\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction' // needed for dayClick\n\n\nimport readJcalFromUrl from './readJcalFromUrl'\nimport retrieveEvents from './retrieveEvents'\nimport mapJcalToFullCalendarEvents from './mapJcalToFullCalendarEvents'\n\nimport './CalendarPreview.scss'\n\nexport default class CalendarPreview extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      calendarEvents: []\n    }\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.url && (this.props.url !== prevProps.url)) {\n      try {\n        const jCal = await readJcalFromUrl(this.props.url)\n        const events = retrieveEvents(jCal)\n        this.setState({ calendarEvents: mapJcalToFullCalendarEvents(events) })\n      } catch (e) {\n        console.log(e)\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className='preview'>\n        <div className='preview-calendar'>\n          <FullCalendar\n            defaultView=\"dayGridMonth\"\n            header={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n            }}\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            ref={this.calendarComponentRef}\n            weekends={this.state.calendarWeekends}\n            events={this.state.calendarEvents}\n            dateClick={this.handleDateClick}\n          />\n        </div>\n        <p className=\"source-url\">Source: {this.props.url}</p>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { PropTypes } from 'prop-types';\n\nimport './IcalSource.scss'\n\nexport default class ICalSource extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { url: '' };\n    this.onSubmit = props.onSubmit\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ url: event.target.value });\n  }\n\n  handleSubmit(event) {\n    this.onSubmit && this.onSubmit(this.state.url)\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form className=\"ical-source\" onSubmit={this.handleSubmit}>\n\n        <div className=\"form-group\">\n          <span>ical-URL</span>\n          <input  className=\"form-field\" \n                  type=\"text\" \n                  placeholder=\"https://mrsimpson.o6s.io/ical-interceptor?url=https://outlook.office...ics?...\" \n                  url={this.state.url} \n                  onChange={this.handleChange} />\n        </div>\n\n        {/* <input class=\"submit\" type=\"submit\" url=\"Submit\" /> */}\n      </form>\n    );\n  }\n}\n\nICalSource.propTypes = {\n  onSubmit: PropTypes.func.isRequired\n};","import React from 'react';\nimport CalendarPreview from './CalendarPreview'\nimport IcalSource from './IcalSource'\n\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      url: ''\n    }\n  }\n\n  setUrl = (url) => { // important: Arrow function to update THIS, the global state!\n    this.setState({ url })\n    console.log('setURL', this.state.url)\n  }\n\n  componentDidUpdate() {\n    console.log('UPDATED', this.state.url)\n  }\n\n  render() {\n    const { url } = this.state\n    return (\n      <div className=\"App\">\n        <IcalSource onSubmit={this.setUrl} />\n        <CalendarPreview url={url} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}